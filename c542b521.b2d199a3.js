(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{180:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var a=n(2),i=n(9),o=(n(0),n(191)),r={id:"models",title:"Models",sidebar_label:"Models"},s={id:"code_doc/database/models",title:"Models",description:"A major change in the v3 Dashboard is the structure of the database. More models where added to help with performance and creating queries.",source:"@site/docs/code_doc/database/models.md",permalink:"/Coastal-Image-Labeler/docs/code_doc/database/models",editUrl:"https://github.com/UNCG-DAISY/Coastal-Image-Labeler/edit/master/docs/docs/code_doc/database/models.md",sidebar_label:"Models",sidebar:"docs",previous:{title:"Connection",permalink:"/Coastal-Image-Labeler/docs/code_doc/database/connection"},next:{title:"Overview",permalink:"/Coastal-Image-Labeler/docs/code_doc/cli/overview"}},l=[{value:"Terminaology",id:"terminaology",children:[]},{value:"Models",id:"models",children:[{value:"Catalog",id:"catalog",children:[]},{value:"Images",id:"images",children:[]},{value:"Question Set",id:"question-set",children:[]},{value:"User",id:"user",children:[]},{value:"Assigned Image",id:"assigned-image",children:[]},{value:"Tag",id:"tag",children:[]},{value:"Notification",id:"notification",children:[]}]},{value:"Namespaces",id:"namespaces",children:[]}],c={rightToc:l};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A major change in the v3 Dashboard is the structure of the database. More models where added to help with performance and creating queries."),Object(o.b)("h2",{id:"terminaology"},"Terminaology"),Object(o.b)("p",null,"I will draw comparisions from MongoDB to SQL terms. Starting from the bottom,"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"Row")," in SQL is called a ",Object(o.b)("inlineCode",{parentName:"p"},"Document")," in MongoDB."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"For example we have a Document for image ",Object(o.b)("inlineCode",{parentName:"li"},"P25959661.jpg")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"Table")," in SQL is called a ",Object(o.b)("inlineCode",{parentName:"p"},"Collection")," in MongoDB."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"For example we have a Collection for all images"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"Schema")," in SQL is a ",Object(o.b)("inlineCode",{parentName:"p"},"Namespace")," in MongoDB."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"For example we have a Namespace called ",Object(o.b)("inlineCode",{parentName:"li"},"dev")," or one called ",Object(o.b)("inlineCode",{parentName:"li"},"production"),".")))),Object(o.b)("h2",{id:"models"},"Models"),Object(o.b)("p",null,"The following are the TypeScript interfaces for each model. If a key has a ",Object(o.b)("inlineCode",{parentName:"p"},"?")," next to it means its optional."),Object(o.b)("h3",{id:"catalog"},"Catalog"),Object(o.b)("p",null,"The Catalog object is the overarching model that contains the archives which in\nturn contains the images. It also contains the questions that are applied to all\nimages of archives that are part of this catalog. This is the types of the\nCatalog."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="Catalog model"',title:'"Catalog','model"':!0}),"export interface CatalogDocument extends Document {\n  dateAdded?: Date\n  name: string\n  path: {\n    original: string\n    compressed?: string\n    //This is here so that any path can be added, for example like gradcam or aux paths\n    [id: string]: string\n  }\n  catalogInfo?: CatalogInfo\n  taggable: boolean\n  questionSet: ObjectID | string\n  imageServeOrder?: {\n    type?: 'random' | 'sequential'\n    data?: any\n  }\n  totalImages?: number\n\n  updateImageCount(): Promise<void> //Function to update totalImages\n}\n")),Object(o.b)("p",null,"There is a new noteable field called ",Object(o.b)("inlineCode",{parentName:"p"},"imageServeOrder"),' that defines how to serve imags. By\ndefault it is "random" however if the json file used for import via the CLI is like so'),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n    "path":{\n        "original":"xxx",\n        "compressed":"xxx",\n        "gradcam": "XXX",\n        "aux": "XXX"\n    },\n    "name":"xxx",\n    "taggable":true,\n    "catalogInfo":{\n        "year": 2020,\n        "link":"xxx",\n        "description":"xxx"\n    }, \n    "imageFormat":[".jpg",".jpeg"],\n    "questionSet":"xxx",\n    //This part right here\n    "imageServeOrder":{\n        "type":"sequential",\n        "data": {\n            //archive name\n            "archive1":["image1.jpg","image2.jpg","image3.jpg","image4.jpg"]\n        }\n    }\n},\n')),Object(o.b)("p",null,"Then images of ",Object(o.b)("inlineCode",{parentName:"p"},"archive1")," will be assigned in that order (image1 is assigned first, then image2 then image3 and so on). ",Object(o.b)("strong",{parentName:"p"},"NOTE")," "),Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"If there are other archives such\nas ",Object(o.b)("inlineCode",{parentName:"p"},"archive2")," that isnt defined then that archive will use random assignment."))),Object(o.b)("h4",{id:"archives"},"Archives"),Object(o.b)("p",null,"These are subfolders of the Catalogs and is originally in place due to how the\nNOAA images where downloaded. They serve no other purpose other then to group\nimages up and serve as a link between Catalogs and Images"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="Archive model"',title:'"Archive','model"':!0}),"export interface ArchiveDocument extends Document {\n  dateAdded?: Date\n  name: string\n  path: {\n    original: string\n    compressed?: string\n  }\n  catalog: ObjectID\n  taggable: boolean\n  totalImages?: number\n\n  updateImageCount(): Promise<void> //function to update totalImages\n}\n")),Object(o.b)("h3",{id:"images"},"Images"),Object(o.b)("p",null,"The Image models most important fields are the ",Object(o.b)("inlineCode",{parentName:"p"},"tags"),", the ",Object(o.b)("inlineCode",{parentName:"p"},"tillComplete")," and\n",Object(o.b)("inlineCode",{parentName:"p"},"taggable")," fields. A major change is the ",Object(o.b)("inlineCode",{parentName:"p"},"tillComplete"),",",Object(o.b)("inlineCode",{parentName:"p"},"finalTag"),",",Object(o.b)("inlineCode",{parentName:"p"},"finishedTagging"),",and ",Object(o.b)("inlineCode",{parentName:"p"},"tags")," fields have been removed"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="Image model"',title:'"Image','model"':!0}),"export interface ImageDocument extends Document {\n  archive: ObjectID\n  dateAdded?: Date\n  name: string\n  path: {\n    original: string\n    compressed?: string\n  }\n  taggable: boolean\n}\n")),Object(o.b)("h3",{id:"question-set"},"Question Set"),Object(o.b)("p",null,"Of the current models, the question set is the only one that is ",Object(o.b)("strong",{parentName:"p"},"NOT")," checked.\nIt serves simply as a guideline for admins to use. Due to this nature it is\n",Object(o.b)("strong",{parentName:"p"},"HIGHLY")," reccomended to make sure the documents for Question Sets are correct\nand is best to copy an existing one"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="Question Set model"',title:'"Question',Set:!0,'model"':!0}),"\nexport interface QuestionSetDocument extends Document {\n  name: string\n  description: string\n  questions: any[] | QuestionSetQuestions[]\n}\n")),Object(o.b)("p",null,"These are some Typescript type annotations to help understand the structre of each question type. Anything with ",Object(o.b)("inlineCode",{parentName:"p"},"?:")," means its optional, else its required"),Object(o.b)("p",null,"There are 4 types of questions, Radio,Checkbox,Quick submit button and Textfield."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'type QuestionSetQuestions = TextFieldQuestion | ButtonSubmitQuestion | CheckboxQuestion | RadioQuestion\n\ntype RadioQuestion = {\n  type: "radioGroup",\n  required: boolean,\n  label: string,\n  docLink: string,\n  key: string,\n  errorMessage: string,\n\n  //This means array of json objects, with each object having a name and value\n  buttons: {\n    name: string,\n    value: string\n  }[]\n}\n\ntype CheckboxQuestion = {\n  type: "checkboxGroup",\n  required: boolean,\n  label: string,\n  docLink: string,\n  key: string,\n  errorMessage: string,\n\n  min?: number,\n  max?: number\n\n  buttons: {\n    name: string,\n    value: string\n  }[]\n\n  //This spacing is option. If you have this, it makes it so that the checkboxes \n  //show up in a nice organized grid pattern. For example you would something like\n  //spacing: {lg:3} which is probably the best one the number has to be \n  //between 1 and 12 (1 usually doesnt work) and the lg,md,sm,and xs is a breakpoint.\n  //lg is large, it will apply the spacing on large screens, if the screen gets \n  //smaller then it doesnt apply it and so the checkboxes try to just fit\n  //on the screen rather then try to be organized in straight columns and rows.\n  spacing?:\n    | {\n        lg: number\n      }\n    | {\n        md: number\n      }\n    | {\n        sm: number\n      }\n    | {\n        xs: number\n      }\n}\n\n\ntype ButtonSubmitQuestion = {\n  type: "buttomSubmit",\n  required: boolean,\n  label: string,\n  docLink: string,\n  key: string,\n  buttons: {\n    label: string,\n    tag: any,\n    key: string\n  }[]\n}\n\ntype TextFieldQuestion = {\n  type: \'textField\'\n  required: boolean\n  label: string\n  docLink: string\n  key: string\n  multiline: boolean\n  rows: number\n}\n')),Object(o.b)("h3",{id:"user"},"User"),Object(o.b)("p",null,"Finally there is the user model which is more or less the same"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="User model"',title:'"User','model"':!0}),"export interface UserDocument extends Document {\n  username: string\n  catalogs: [ObjectID]\n  dateAdded: Date\n  roles: string[]\n  userId: string\n}\n")),Object(o.b)("h3",{id:"assigned-image"},"Assigned Image"),Object(o.b)("p",null,"This is one of the newer models. It serves to store the currerntly assigned image of a (user,archive) pair. This model requires that ",Object(o.b)("inlineCode",{parentName:"p"},"imageId"),",",Object(o.b)("inlineCode",{parentName:"p"},"archiveId"),",",Object(o.b)("inlineCode",{parentName:"p"},"userId")," be given. The remaining fields are automatically created"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="Assigned Image model"',title:'"Assigned',Image:!0,'model"':!0}),"export interface AssingedImageDocument extends Document {\n  imageId: ObjectID\n  catalogId?: ObjectID\n  archiveId?: ObjectID\n  userId: ObjectID\n  date: Date\n  archive?: ArchiveDocument\n  catalog?: CatalogDocument\n}\n")),Object(o.b)("h3",{id:"tag"},"Tag"),Object(o.b)("p",null,"Another new model. This model takes the data from the ",Object(o.b)("inlineCode",{parentName:"p"},"tags")," field of an image and places each tag as a new entry. This is done for many reasons. Firsty it makes it easy to get a list of images that have been tagged, since every entry is a tag of an image that has been tagged. It also ensures that certain pieces of information are recorded such as ",Object(o.b)("inlineCode",{parentName:"p"},"userId")," and ",Object(o.b)("inlineCode",{parentName:"p"},"imageId")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="Tag model"',title:'"Tag','model"':!0}),"export interface TagDocument extends Document {\n  imageId: ObjectID\n  catalogId?: ObjectID\n  archiveId?: ObjectID\n  userId: ObjectID\n  tags?: any\n  date: Date\n  ignoreFields?: string[]\n  image?: ImageDocument\n}\n")),Object(o.b)("h3",{id:"notification"},"Notification"),Object(o.b)("p",null,"This is global messages to show to users. "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="Notification model"',title:'"Notification','model"':!0}),"export interface NotificationDocument extends Document {\n  message: string\n  dateAdded: Date\n}\n")),Object(o.b)("p",null,"It just has a message and the date of the message. On the home page it shows the recent message as the top one.\nThe message can even have html and css inside it, for example like so."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="Example notification"',title:'"Example','notification"':!0}),'{\n  "dateAdded": "2020-10-19T02:50:20.406+00:00",\n  "message": "<a href=\'/#123\' style=\'text-decoration: none; color: #ffe59e\'>test</a>."\n}\n')),Object(o.b)("h2",{id:"namespaces"},"Namespaces"),Object(o.b)("p",null,"As mentioned before Namespaces are like Schemas in SQL. Generally there are 3, a\ndev namespace,a production namespace and test namespace."))}d.isMDXComponent=!0},191:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return g}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),d=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=d(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},p=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),p=a,g=m["".concat(r,".").concat(p)]||m[p]||b[p]||o;return n?i.a.createElement(g,s(s({ref:t},c),{},{components:n})):i.a.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);